---
- name: Copy k8s kpi from primary master to candidates
  synchronize:
    src: "/etc/kubernetes/pki"
    dest: "/etc/kubernetes/"
    recursive: yes
    delete: yes
    checksum: yes
  delegate_to: "{{ master_hosts[0] }}"
  
- name: Copy kubeadm.yaml file
  template: src=kubeadm.yaml.j2  dest={{ kubeadm_config }}
  
- name: Init Kubernetes cluster
  shell: |
    kubeadm init --config={{ kubeadm_config }} --ignore-preflight-errors=CRI
  register: init_cluster

- name: Create Kubernetes config directory
  file: path=/root/.kube/ state=directory

- name: Copy admin.conf to Home directory
  copy:
    src: "{{ kubeadmin_config }}"
    dest: "/root/.kube/config"
    owner: root
    group: root
    mode: 0755
    remote_src: True

- name: Wait until node is available
  shell: kubectl get no | grep {{ ansible_hostname }}
  register: get_node_result
  until: get_node_result.rc == 0
  retries: 50
  delay: 5

- name: Check node readiness
  shell: |
    kubectl get nodes --no-headers=true | awk '{print $2}' | grep Ready | wc -l
  register: get_ready
  until: get_ready.stdout | int == master_hosts | length
  retries: 20
  delay: 15
  
- name: Wait until apiserver starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po kube-apiserver-{{ ansible_hostname }} --namespace=kube-system --no-headers=true
  register: check_apiserver
  until: check_apiserver.rc == 0 and check_apiserver.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"
  
- name: Wait until controller manager starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po kube-controller-manager-{{ ansible_hostname }} --namespace=kube-system --no-headers=true
  register: check_controller
  until: check_controller.rc == 0 and check_controller.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"
  
- name: Wait until scheduler starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po kube-scheduler-{{ ansible_hostname }} --namespace=kube-system --no-headers=true
  register: check_scheduler
  until: check_scheduler.rc == 0 and check_scheduler.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

- name: Wait until kube-proxy starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system --no-headers=true -l k8s-app=kube-proxy -o wide | grep {{ ansible_hostname }}
  register: check_proxy
  until: check_proxy.rc == 0 and check_proxy.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"
  run_once: true

- name: Set master label
  shell: |
    kubectl label --overwrite=true node {{ ansible_hostname }} {{ item }}
  with_items:
    - "kubeadm.alpha.kubernetes.io/role=master"
    - "management=yes"

