---
- name: Create rpm directory
  file: path={{ rpm_dir }} state=directory

- name: Copy rpm files to all hosts
  synchronize:
    src: "{{ k8s_updrade_rpms_dir }}/"
    dest: "{{ rpm_dir }}"
    checksum: yes

- name: Prepare the host for maintenance
  shell: |
    kubectl drain {{ ansible_hostname }} --ignore-daemonsets
  ignore_errors: True

- name: Online upgrade kubelet & kubectl
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: present
  with_items:
    - kubectl-{{ upgrade_yum_kubectl_version }}
    - kubelet-{{ upgrade_yum_kubelet_version }}
  when: offline is not defined or not offline | bool
  
- name: Offline upgrade kubelet & kubectl
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ rpm_dir }}/kubectl-{{ upgrade_yum_kubectl_version }}.x86_64.rpm"
    - "{{ rpm_dir }}/kubelet-{{ upgrade_yum_kubelet_version }}.x86_64.rpm"
  when:
    - offline is defined
    - offline | bool
  
- name: Upgrade kubelet
  shell: |
    systemctl daemon-reload

- name: Restart kubelet
  systemd:
    name: "{{ item }}"
    state: restarted
  with_items:
    - kubelet

- name: Check node version
  shell: |
    kubectl get node {{ ansible_hostname }} --no-headers=true | grep {{ k8s_upgrade_version }}
  register: check_version
  until: check_version.rc == 0
  retries: 30
  delay: 30
    
- name: Check node ready
  shell: |
    kubectl get node {{ ansible_hostname }} --no-headers=true | grep ' Ready'
  register: get_ready
  until: get_ready.rc == 0
  retries: 5
  delay: 5

- name: Bring the host back online
  shell: |
    kubectl uncordon {{ ansible_hostname }}
