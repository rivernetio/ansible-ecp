---
- name: Create prometheus directory
  file: path={{ kube_ecp_dir }}/prometheus state=directory

- name: Copy prometheus yaml file
  template: src={{ item }} dest={{ kube_ecp_dir }}/prometheus/{{ item | basename | regex_replace('\.j2', '') }}
  with_fileglob:
    - ../templates/prometheus/*.j2
    
- name: Create repository directory
  file: path={{ ecp_share_dir }}/prometheus/config state=directory
  run_once: true

- slurp:
    src: "{{ kube_ecp_dir }}/prometheus/prometheus.yml"
  register: prometheus

- name: Create prometheus configuration
  copy:
    dest: "{{ ecp_share_dir }}/prometheus/config/prometheus.yml"
    content: "{{ prometheus.content | b64decode }}"
    mode: 0644
  run_once: true

- slurp:
    src: "{{ kube_ecp_dir }}/prometheus/prometheus-record.rules"
  register: prometheus_record_rules

- name: Create prometheus record rules
  copy:
    dest: "{{ ecp_share_dir }}/prometheus/config/prometheus-record.rules"
    content: "{{ prometheus_record_rules.content | b64decode }}"
    mode: 0644
  run_once: true

- slurp:
    src: "{{ kube_ecp_dir }}/prometheus/app-record.rules"
  register: app_record_rules

- name: Create app record rules
  copy:
    dest: "{{ ecp_share_dir }}/prometheus/config/app-record.rules"
    content: "{{ app_record_rules.content | b64decode }}"
    mode: 0644
  run_once: true
  
- name: Check if prometheus service account already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get sa --namespace={{ ecp_namespace }} | grep prometheus
  run_once: true
  register: check_prometheus_sa
  failed_when: check_prometheus_sa.rc != 0 and check_prometheus_sa.rc != 1

- name: Create prometheus RBAC
  when: check_prometheus_sa.rc != 0
  shell: "{{ item }}"
  with_items:
    - kubectl --kubeconfig={{ kubeadmin_config }} create -f {{ kube_ecp_dir }}/prometheus/prometheus-rbac.yml
    - kubectl --kubeconfig={{ kubeadmin_config }} create -f {{ kube_ecp_dir }}/prometheus/prometheus-k8s-rbac.yml
  run_once: true
  
- name: Check if prometheus deployment already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get deploy --namespace={{ ecp_namespace }} | grep prometheus
  run_once: true
  register: check_prometheus_deploy
  failed_when: check_prometheus_deploy.rc != 0 and check_prometheus_deploy.rc != 1
  
- name: Check if custom-metrics-apiserver deployment already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get deploy --namespace={{ ecp_namespace }} | grep custom-metrics-apiserver
  run_once: true
  register: check_custom_metrics_apiserver_deploy
  failed_when: check_custom_metrics_apiserver_deploy.rc != 0 and check_custom_metrics_apiserver_deploy.rc != 1

- name: Create prometheus, exporters, and grafana
  when: check_prometheus_deploy.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/prometheus/manifests-all.yaml
  run_once: true
  
- name: Create custom-metrics-apiserver
  when: check_custom_metrics_apiserver_deploy.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/prometheus/custom-metrics.yaml
  run_once: true

- name: Wait until grafana pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace={{ ecp_namespace }} | grep grafana
  register: check_grafana
  until: check_grafana.rc == 0 and check_grafana.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

- name: Wait until metrics pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system | grep kube-state-metrics
  register: check_metrics
  until: check_metrics.rc == 0 and check_metrics.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

- name: Wait until prometheus pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace={{ ecp_namespace }} | grep prometheus
  register: check_prometheus
  until: check_prometheus.rc == 0 and check_prometheus.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

- name: Wait until custom-metrics-apiserver pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace={{ ecp_namespace }} | grep custom-metrics-apiserver
  register: check_custom_metrics_apiserver
  until: check_custom_metrics_apiserver.rc == 0 and check_custom_metrics_apiserver.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"
