---
- name: Create appstore directory
  file: path={{ kube_ecp_dir }}/appstore state=directory

- name: Create repository directory
  file: path={{ kube_ecp_dir }}/repository state=directory

- name: Overwrite ecp helm charts local repository
  when:
    - ecp is defined
    - ecp | bool
  set_fact: ecp_charts_url="http://127.0.0.1:8879/charts"

- name: Copy repository yaml file
  template: src={{ item }} dest={{ kube_ecp_dir }}/repository/{{ item | basename | regex_replace('\.j2', '') }}
  with_fileglob:
    - ../templates/repository/*.j2

- name: Copy ecp helm charts
  when:
    - ecp is defined
    - ecp | bool
  copy:
    src: "{{ ecp_local_charts_repo }}/local"
    dest: "{{ kube_ecp_dir }}/repository/"

- name: Copy ecp chart images
  copy:
    src: "{{ ecp_local_charts_repo }}/image"
    dest: "{{ kube_ecp_dir }}/repository/"

- name: Copy appstore yaml file
  template: src={{ item }} dest={{ kube_ecp_dir }}/appstore/{{ item | basename | regex_replace('\.j2', '') }}
  with_fileglob:
    - ../templates/appstore/*.j2

- name: Get the appstore host
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get nodes --no-headers=true -l appstore=yes | awk '{print $1}'
  register: get_appstore_host

- set_fact: appstore_host={{ get_appstore_host.stdout }}

- name: Create repository directory on appstore host
  file: path=/etc/repository state=directory
  run_once: true
  delegate_to: "{{ appstore_host }}"

- name: Copy file to appstore host
  synchronize:
    src: "{{ kube_ecp_dir }}/repository"
    dest: "/etc/"
    mode: pull
  delegate_to: "{{ appstore_host }}"

- name: Check if rudder pod already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system | grep rudder
  run_once: true
  register: check_rudder
  failed_when: check_rudder.rc != 0 and check_rudder.rc != 1

- name: Check if tiller pod already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system | grep tiller
  run_once: true
  register: check_tiller
  failed_when: check_tiller.rc != 0 and check_tiller.rc != 1
    
- name: Create rudder
  when: check_rudder.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/appstore/helm_rudder.yaml
  run_once: true

- name: Check if appstore service account already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get sa --namespace=kube-system | grep appstore
  run_once: true
  register: check_appstore_sa
  failed_when: check_appstore_sa.rc != 0 and check_appstore_sa.rc != 1

- name: Create RBAC
  when: check_appstore_sa.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/appstore/appstore-k8s-rbac.yaml
  run_once: true

- name: Create tiller
  when: check_tiller.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/appstore/tiller.yaml
  run_once: true

- name: Wait until rudder pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system | grep rudder
  register: check_rudder
  until: check_rudder.rc == 0 and check_rudder.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

- name: Wait until tiller pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace=kube-system | grep tiller
  register: check_tiller
  until: check_tiller.rc == 0 and check_tiller.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"
  
