---
- name: Create logging service directory
  file: path={{ kube_ecp_dir }}/canes state=directory

- name: Copy logging service yaml file
  template: src={{ item }} dest={{ kube_ecp_dir }}/canes/{{ item | basename | regex_replace('\.j2', '') }}
  with_fileglob:
    - ../templates/canes/*.j2
    
- name: Create es data directory
  file: path={{ ecp_share_dir }}/es_data state=directory
  run_once: true
  
- name: Create fileserver download directory
  file: path={{ ecp_share_dir }}/fileserver_download state=directory
  run_once: true

- name: Check if canes controller already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get rc --namespace={{ ecp_namespace }} | grep firmament-canes
  register: check_canes_rc
  failed_when: check_canes_rc.rc != 0 and check_canes_rc.rc != 1

- name: Create canes rc
  when: check_canes_rc.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/canes-controller.yaml
  run_once: true

- name: Check if canes service already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get svc --namespace={{ ecp_namespace }} | grep canes-firmament-com
  register: check_canes_svc
  failed_when: check_canes_svc.rc != 0 and check_canes_svc.rc != 1

- name: Create canes service
  when: check_canes_svc.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/canes-service.yaml
  run_once: true

- name: Check if elasticsearch service already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get rc --namespace={{ ecp_namespace }} | grep elasticsearch-logging
  register: check_es_svc
  failed_when: check_es_svc.rc != 0 and check_es_svc.rc != 1

- name: Create elasticsearch single service
  when: 
    - check_es_svc.rc != 0
    - master_hosts|length == 1
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/es-service-internal-single-svc.yaml
  run_once: true

- name: Create elasticsearch cluster service
  when: 
    - check_es_svc.rc != 0
    - master_hosts|length > 1
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/es-service-internal-cluster-svc.yaml
  run_once: true
  

- name: Check if curator cronjob already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get cronjobs --namespace={{ ecp_namespace }} | grep curator
  register: check_curator_cronjob
  failed_when: check_curator_cronjob.rc != 0 and check_curator_cronjob.rc != 1

- name: Create curator cronjob
  when: check_curator_cronjob.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/es-curator-cronjob.yaml
  run_once: true
  
- name: Check if curator configmap already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get cm --namespace={{ ecp_namespace }} | grep curator-config
  register: check_curator_cm
  failed_when: check_curator_cm.rc !=0 and check_curator_cm.rc != 1

- name: Create curator configmap
  when: check_curator_cm.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/es-curator-config.yaml
  run_once: true

- name: Check if fluentd configmap already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get cm --namespace={{ ecp_namespace }} | grep fluentd-es-config
  register: check_fluentd_cm
  failed_when: check_fluentd_cm.rc !=0 and check_fluentd_cm.rc != 1

- name: Create fluentd configmap
  when: check_fluentd_cm.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/fluentd-es-configmap.yaml
  run_once: true

- name: Check if fluentd daemonset already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get ds --namespace={{ ecp_namespace }} | grep fluentd-es
  register: check_fluentd_ds
  failed_when: check_fluentd_ds.rc !=0 and check_fluentd_ds.rc != 1

- name: Create fluentd daemonset
  when: check_fluentd_ds.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/fluentd-es-ds.yaml
  run_once: true
  
- name: Check if kibana deployment already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get deploy --namespace={{ ecp_namespace }} | grep kibana-logging
  register: check_kibana_deploy
  failed_when: check_kibana_deploy.rc != 0 and check_kibana_deploy.rc != 1

- name: Create canes deployment
  when: check_kibana_deploy.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/kibana-deployment.yaml
  run_once: true
  
- name: Check if kibana service already exists
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get svc --namespace={{ ecp_namespace }} | grep kibana-logging
  register: check_kibana_svc
  failed_when: check_kibana_svc.rc != 0 and check_kibana_svc.rc != 1

- name: Create kibana service
  when: check_kibana_svc.rc != 0
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            create -f {{ kube_ecp_dir }}/canes/kibana-service.yaml
  run_once: true
  
- name: Wait until es pod starts to run
  shell: |
    kubectl --kubeconfig={{ kubeadmin_config }} \
            get po --namespace={{ ecp_namespace }} | grep elasticsearch-logging
  register: check_es
  until: check_es.rc == 0 and check_es.stdout.find("Running") != -1
  retries: "{{ pod_run_retry | int }}"
  delay: "{{ pod_run_retry_delay | int }}"

